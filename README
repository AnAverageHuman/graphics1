graphics1
Abusing Makefiles Edition

--------------------------------------------------------------------------------

Requires GNU Make >=v4.2, the default make for most Linux systems that have it.
Requires bash for a few constructs.
Also requires `rm' and `mkdir' for preparation only.

--------------------------------------------------------------------------------

Usage:
$ make
Alternatively, it can be run like an executable:
$ ./Makefile

Running the default target destroys old images with the same target name.
A PPM is generated with rectangular dimensions between $LB and $HB.

If you need to debug the Makefile itself, declare the variable $V:
$ V=[...] make
or
$ make V=[...]
It does not matter what $V is set to, just that it exists.

The following variables can be set in a similar manner:
OUTFILE  | The file to output to.
MAXCOLOR | The maximum value a color can have.
LB       | The smallest possible dimension.
HB       | The largest possible dimension.
RLB      | The smallest possible row dimension. Takes precedence over LB.
CLB      | The smallest possible column dimension. Takes precedence over LB.
RHB      | The largest possible row dimension. Takes precedence over HB.
CHB      | The largest possible column dimension. Takes precedence over HB.

For example, to lock the dimensions to 50*50, one might run:
$ make LB=49 HB=50
That is the same as:
$ LB=49 HB=50 make

There are no sanity checks.
As such, using a {,R,C}LB value equal to or greater than its respective {,R,C}HB
value will not crash the program, but also will not work as expected (if one
does expect anything to come from doing so).

--------------------------------------------------------------------------------

Notes:

This is (mostly) a proof of concept and is not meant to run fast. It took about
6m23.998s to generate a 849*732 image.

The algorithm should allow parallel processing, but currently does not build in
parallel for reasons unknown.
It might be possible to further optimize this by creating a matrix of targets,
so that creation of individual pixels can itself be parallelized.
Alternatively, since we currently aren't doing anything special with the rows
and columns, we can really just have one generator for pixels to generate W*H
pixels.

